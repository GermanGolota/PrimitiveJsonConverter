//HintName: DiceRollPrimitiveJsonConverter.g.cs
﻿// <auto-generated />
﻿using System.Text.Json;
﻿#nullable enable
namespace PrimitiveJsonConverterGenerator
{
	internal sealed class DiceRollPrimitiveJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::DiceRoll>
	{
		public static void Load()
		{
			global::PrimitiveJsonConverterGenerator.PrimitiveJsonConverterFactory.Converters.Add(typeof(global::DiceRoll), new DiceRollPrimitiveJsonConverter());
		}
		public override global::System.Boolean CanConvert(global::System.Type typeToConvert)
		{
			return typeToConvert == typeof(global::DiceRoll);
		}
		public override global::DiceRoll? Read(ref Utf8JsonReader reader, global::System.Type typeToConvert, JsonSerializerOptions options)
		{
			reader.Read();
			if (reader.TokenType == JsonTokenType.Number) return (global::DiceRoll?) reader.GetInt32();
			return null;
		}
		public override void Write(Utf8JsonWriter writer, global::DiceRoll value, JsonSerializerOptions options)
		{
			global::System.Int32? temp = (global::System.Int32?)value;
			if(temp.HasValue)
			{
				writer.WriteNumberValue(temp.Value);
			}
			else
			{
				writer.WriteNullValue();
			}
		}
	}
}
﻿#nullable disable
